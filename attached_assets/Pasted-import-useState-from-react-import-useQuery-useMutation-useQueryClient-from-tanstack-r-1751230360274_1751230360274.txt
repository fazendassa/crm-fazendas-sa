import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { DragDropContext, Droppable, Draggable, type DropResult } from "@hello-pangea/dnd";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { useToast } from "@/hooks/use-toast";
import { Plus, DollarSign, ArrowUp, ArrowDown, Settings } from "lucide-react";
import DealForm from "./deal-form";
import type { DealWithRelations, PipelineStage } from "@shared/schema";

interface KanbanBoardProps {
  pipelineId: number;
}

export default function KanbanBoard({ pipelineId }: KanbanBoardProps) {
  const [selectedDeal, setSelectedDeal] = useState<DealWithRelations | null>(null);
  const [isDealDialogOpen, setIsDealDialogOpen] = useState(false);
  const [defaultStage, setDefaultStage] = useState<string | undefined>();
  const [isAddingStage, setIsAddingStage] = useState(false);
  const [newStageTitle, setNewStageTitle] = useState("");
  const [isReorderModalOpen, setIsReorderModalOpen] = useState(false);
  const [reorderStages, setReorderStages] = useState<PipelineStage[]>([]);

  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Fetch pipeline stages
  const { data: stages = [], isLoading: stagesLoading } = useQuery<PipelineStage[]>({
    queryKey: [`/api/pipeline-stages?pipelineId=${pipelineId}`],
  });

  // Fetch deals grouped by stage
  const { data: dealsData = [], isLoading: dealsLoading } = useQuery<{ stage: string; count: number; deals: DealWithRelations[] }[]>({
    queryKey: [`/api/deals/by-stage?pipelineId=${pipelineId}`],
  });

  // Mutation: create a new stage
  const createStageMutation = useMutation({
    mutationFn: async (title: string) => {
      const response = await fetch(`/api/pipeline-stages`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({ title, pipelineId, position: stages.length, isDefault: false }),
      });
      if (!response.ok) throw new Error(`Failed to create stage: ${response.status}`);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [`/api/pipeline-stages?pipelineId=${pipelineId}`] });
      setIsAddingStage(false);
      setNewStageTitle("");
      toast({ title: "Sucesso", description: "Estágio criado com sucesso" });
    },
    onError: (error) => {
      console.error(error);
      toast({ title: "Erro", description: "Não foi possível criar estágio.", variant: "destructive" });
    },
  });

  // Mutation: update positions of stages
  const updateStagePositionsMutation = useMutation({
    mutationFn: async (
      positions: Array<{ id: number; position: number }>
    ) => {
      const response = await fetch(
        `/api/pipeline-stages/positions?pipelineId=${pipelineId}`,
        {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          credentials: "include",
          body: JSON.stringify({ pipelineId, stages: positions }),
        }
      );
      if (!response.ok) {
        const body = await response.text();
        throw new Error(`Failed to update positions: ${response.status} ${body}`);
      }
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [`/api/pipeline-stages?pipelineId=${pipelineId}`] });
      setIsReorderModalOpen(false);
      toast({ title: "Sucesso", description: "Ordem dos estágios atualizada" });
    },
    onError: (error) => {
      console.error(error);
      toast({ title: "Erro", description: "Não foi possível reordenar estágios.", variant: "destructive" });
    },
  });

  // ... rest of component unchanged, using updateStagePositionsMutation
}
